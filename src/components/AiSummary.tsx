import React, { useState, useRef, useCallback } from 'react';
import { Lightbulb, Link, Sparkles, Download, RefreshCw, Image, Video, Play, AlertTriangle } from 'lucide-react';

interface AiSummaryProps {
  summary: string;
  keyPoints: string[];
  sources: string[];
  isLoading: boolean;
  error?: string;
  theme: 'light' | 'dark';
  onRefresh?: () => void;
}

export const AiSummary: React.FC<AiSummaryProps> = ({ 
  summary, 
  keyPoints, 
  sources, 
  isLoading, 
  error,
  theme,
  onRefresh 
}) => {
  const [height, setHeight] = useState(400);
  const [isResizing, setIsResizing] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const startY = useRef(0);
  const startHeight = useRef(0);

  // Mock image data
  const mockImages = [
    {
      url: 'https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Image 1',
      source: 'Pexels'
    },
    {
      url: 'https://images.pexels.com/photos/574071/pexels-photo-574071.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Image 2',
      source: 'Pexels'
    },
    {
      url: 'https://images.pexels.com/photos/1181244/pexels-photo-1181244.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Image 3',
      source: 'Pexels'
    },
    {
      url: 'https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Image 4',
      source: 'Pexels'
    }
  ];

  // Mock video data
  const mockVideos = [
    {
      thumbnail: 'https://images.pexels.com/photos/1181298/pexels-photo-1181298.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Video 1',
      duration: '5:23',
      source: 'YouTube'
    },
    {
      thumbnail: 'https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Video 2',
      duration: '8:45',
      source: 'YouTube'
    },
    {
      thumbnail: 'https://images.pexels.com/photos/574071/pexels-photo-574071.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Video 3',
      duration: '12:10',
      source: 'Vimeo'
    },
    {
      thumbnail: 'https://images.pexels.com/photos/1181244/pexels-photo-1181244.jpeg?auto=compress&cs=tinysrgb&w=200&h=150&fit=crop',
      title: 'Related Video 4',
      duration: '3:56',
      source: 'YouTube'
    }
  ];

  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    setIsResizing(true);
    startY.current = e.clientY;
    startHeight.current = height;
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    document.body.style.cursor = 'ns-resize';
    document.body.style.userSelect = 'none';
  }, [height]);

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isResizing) return;
    
    const deltaY = e.clientY - startY.current;
    const newHeight = Math.max(200, startHeight.current + deltaY);
    setHeight(newHeight);
  }, [isResizing]);

  const handleMouseUp = useCallback(() => {
    setIsResizing(false);
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
    document.body.style.cursor = '';
    document.body.style.userSelect = '';
  }, [handleMouseMove]);

  const handleDownloadText = () => {
    const content = `
AI SUMMARY REPORT
==================

Summary:
${summary}

Key Points:
${keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}

Sources:
${sources.join(', ')}

Generated by MySearchBot™
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadHTML = () => {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>AI Summary Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
          h1 { color: #635BFF; border-bottom: 2px solid #635BFF; padding-bottom: 10px; }
          h2 { color: #333; margin-top: 30px; }
          .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
          .key-points { margin: 20px 0; }
          .key-points li { margin: 8px 0; }
          .sources { background: #e9ecef; padding: 15px; border-radius: 8px; }
          .footer { margin-top: 40px; text-align: center; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <h1>AI Summary Report</h1>
        
        <h2>Summary</h2>
        <div class="summary">${summary}</div>
        
        <h2>Key Points</h2>
        <ul class="key-points">
          ${keyPoints.map(point => `<li>${point}</li>`).join('')}
        </ul>
        
        <h2>Sources</h2>
        <div class="sources">${sources.join(', ')}</div>
        
        <div class="footer">
          Generated by MySearchBot™<br>
          Date: ${new Date().toLocaleDateString()}
        </div>
      </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadPDF = () => {
    const pdfContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>AI Summary Report - PDF</title>
        <style>
          @page { margin: 1in; }
          body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            line-height: 1.6; 
            color: #333;
          }
          .header { 
            text-align: center; 
            border-bottom: 3px solid #635BFF; 
            padding-bottom: 20px; 
            margin-bottom: 30px; 
          }
          .header h1 { 
            color: #635BFF; 
            font-size: 28px; 
            margin: 0; 
            font-weight: 700;
          }
          .header .subtitle { 
            color: #666; 
            font-size: 14px; 
            margin-top: 5px; 
          }
          .section { 
            margin-bottom: 25px; 
            page-break-inside: avoid; 
          }
          .section h2 { 
            color: #635BFF; 
            font-size: 18px; 
            border-left: 4px solid #635BFF; 
            padding-left: 15px; 
            margin-bottom: 15px; 
          }
          .summary-box { 
            background: #f8f9fa; 
            padding: 20px; 
            border-radius: 8px; 
            border-left: 4px solid #635BFF; 
            margin: 15px 0; 
          }
          .key-points { 
            margin: 15px 0; 
            padding-left: 0; 
          }
          .key-points li { 
            margin: 10px 0; 
            padding-left: 20px; 
            position: relative; 
          }
          .key-points li::before { 
            content: "•"; 
            color: #635BFF; 
            font-weight: bold; 
            position: absolute; 
            left: 0; 
          }
          .sources-box { 
            background: #e9ecef; 
            padding: 15px; 
            border-radius: 8px; 
            border: 1px solid #dee2e6; 
          }
          .footer { 
            margin-top: 40px; 
            text-align: center; 
            color: #666; 
            font-size: 12px; 
            border-top: 1px solid #dee2e6; 
            padding-top: 20px; 
          }
          .metadata { 
            display: flex; 
            justify-content: space-between; 
            font-size: 12px; 
            color: #666; 
            margin-bottom: 10px; 
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>AI Summary Report</h1>
          <div class="subtitle">Generated by MySearchBot™ - AI-Enhanced Multi-Engine Search Platform</div>
        </div>
        
        <div class="metadata">
          <span>Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</span>
          <span>Sources: ${sources.length} search engines</span>
        </div>
        
        <div class="section">
          <h2>Executive Summary</h2>
          <div class="summary-box">${summary}</div>
        </div>
        
        <div class="section">
          <h2>Key Insights</h2>
          <ul class="key-points">
            ${keyPoints.map(point => `<li>${point}</li>`).join('')}
          </ul>
        </div>
        
        <div class="section">
          <h2>Data Sources</h2>
          <div class="sources-box">
            <strong>Search Engines Analyzed:</strong> ${sources.join(', ')}
          </div>
        </div>
        
        <div class="footer">
          <div><strong>MySearchBot™</strong> - Search It Your Way™</div>
          <div>AI-Enhanced Multi-Engine Search Platform</div>
          <div style="margin-top: 10px;">This report was automatically generated using advanced AI analysis of search results from multiple search engines.</div>
        </div>
      </body>
      </html>
    `;

    const blob = new Blob([pdfContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-pdf-${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Custom AI Bot SVG Component
  const AiBotIcon = () => (
    <svg 
      className="w-6 h-6 mr-3" 
      viewBox="0 0 293.38 264.506"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        d="M110.79,144.206c-5.3-3.1-11.5-1.7-15.4,3.5-1.6,2.1-2.2,4.8-2.5,11-.7,14,2.4,20.4,10.6,21.5,2.8.4,4.9,0,7.1-1.3,4.8-2.8,6.5-7.5,6.5-17.4s-1.7-14.6-6.3-17.3h0Z" 
        fill="red"
      />
      <path 
        d="M199.69,171.606c1.4-4.9,1.1-16.8-.4-21.1-.7-1.9-2.8-4.5-4.6-5.8-6.1-4.1-13.4-2-16.7,4.8-2.4,4.9-2.4,19.1,0,24,4.9,10,18.7,8.7,21.7-1.9Z" 
        fill="red"
      />
      <path 
        d="M139.19,53.006l-6.2.7c-6.6.7-14.5,3.7-17.8,6.7-1.4,1.3-4.9,2.3-11,3-12.2,1.6-28.6,5.6-35.9,8.8-19.5,8.6-32.3,21.7-39.2,40.3-3.1,8.2-3.4,8.6-8.1,10.8-6,2.9-9.9,6.6-12.5,11.6-4.4,8.6-5.9,27.4-3.4,41.7,2.3,12.5,6.4,18.5,16,23.1,4.6,2.2,5,2.6,7.5,9.8,8.5,24.1,27.1,39.5,56.2,46.4,18.5,4.5,26.4,5.1,61.4,5.1s45.5-.8,64.2-5.5c28-7.1,46.7-23,54.7-46.7,2.1-6.4,2.5-6.9,7.2-9.1,6.1-2.9,10-6.5,12.6-11.6,4.4-8.6,5.9-27.4,3.4-41.7-2.3-12.5-6.4-18.5-16-23.1-4.6-2.2-5-2.6-7.5-9.8-10-28.6-34.4-44.9-75.1-50-6.6-.8-10.1-1.8-11.5-3-3.2-3-10.7-5.9-17.4-6.8-3.4-.5-6.3-1.1-6.5-1.3-.6-.6-2.6-12.7-2.6-15.7s.6-2.2,1.3-2.2c1.8,0,6.4-4.6,8.3-8.2,2.2-4.2,1.5-12.5-1.4-16.5-1.2-1.7-3.7-3.8-5.6-4.7-7.1-3.4-16.6-1.2-20.8,4.7-2.9,4-3.6,12.3-1.4,16.5,1.9,3.6,6.5,8.2,8.3,8.2s1.5,3.1-.1,12l-1.1,6.5h0ZM155.69,92.206c47.6.9,69.1,8.3,78.3,26.8,7.5,15.2,9.6,46.6,4.7,70.5-6.5,31.9-27.5,41.3-92,41.3s-94.4-13-94.4-69.3c.1-33.7,6.9-50.6,23.8-59.2,10.5-5.3,28.9-8.9,52.6-10.2,3.6-.2,15.7-.2,27,.1h0Z"
        fill={theme === 'dark' ? 'white' : 'black'}
      />
    </svg>
  );

  return (
    <div 
      ref={containerRef}
      className={`${theme === 'dark' ? 'bg-gray-800/95 border-gray-700' : 'bg-white border-gray-200'} rounded-xl border-2 shadow-lg backdrop-blur-sm relative`}
      style={{ 
        height: `${height}px`, 
        minHeight: '200px'
      }}
    >
      <div className={`flex items-center justify-between p-4 border-b ${theme === 'dark' ? 'border-gray-700' : 'border-gray-200'}`}>
        <div className="flex items-center">
          <AiBotIcon />
          <h3 className={`text-lg font-semibold ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
            AI Summary
          </h3>
          <Sparkles className="w-4 h-4 ml-2 animate-pulse" style={{ color: '#635BFF' }} />
        </div>
        
        {!isLoading && !error && summary && (
          <div className="flex items-center gap-2">
            <div className="relative group">
              <button
                className={`p-2 rounded-lg transition-all duration-200 hover:scale-105 ${theme === 'dark' ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-white hover:bg-gray-50 text-gray-600'} border ${theme === 'dark' ? 'border-gray-600' : 'border-gray-200'} shadow-sm`}
                title="Download Summary"
              >
                <Download className="w-4 h-4" />
              </button>
              
              <div className={`absolute right-0 top-full mt-1 w-52 ${theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10`}>
                <button
                  onClick={handleDownloadPDF}
                  className={`w-full text-left px-4 py-2 text-sm ${theme === 'dark' ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-50'} rounded-t-lg transition-colors duration-200`}
                >
                  Download as PDF (.html)
                </button>
                <button
                  onClick={handleDownloadHTML}
                  className={`w-full text-left px-4 py-2 text-sm ${theme === 'dark' ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-50'} transition-colors duration-200`}
                >
                  Download as HTML (.html)
                </button>
                <button
                  onClick={handleDownloadText}
                  className={`w-full text-left px-4 py-2 text-sm ${theme === 'dark' ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-50'} rounded-b-lg transition-colors duration-200`}
                >
                  Download as Text (.txt)
                </button>
              </div>
            </div>
            
            <button
              onClick={onRefresh}
              className={`p-2 rounded-lg transition-all duration-200 hover:scale-105 ${theme === 'dark' ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' : 'bg-white hover:bg-gray-50 text-gray-600'} border ${theme === 'dark' ? 'border-gray-600' : 'border-gray-200'} shadow-sm`}
              title="Refresh Summary"
            >
              <RefreshCw className="w-4 h-4" />
            </button>
          </div>
        )}
      </div>
      
      <div className="p-4 overflow-hidden" style={{ height: `${height - 80}px` }}>
        {isLoading ? (
          <div className="space-y-4">
            <div className={`flex items-center`} style={{ color: '#635BFF' }}>
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent mr-2"></div>
              <span className="text-sm">Analyzing search results and generating summary...</span>
            </div>
            <div className="space-y-2">
              {[...Array(3)].map((_, i) => (
                <div key={i} className={`h-3 ${theme === 'dark' ? 'bg-gray-700' : 'bg-gray-200'} rounded animate-pulse`}></div>
              ))}
            </div>
          </div>
        ) : error ? (
          <div className={`flex items-center gap-3 p-4 rounded-lg ${theme === 'dark' ? 'bg-red-900/20 text-red-300' : 'bg-red-50 text-red-700'}`}>
            <AlertTriangle className="w-5 h-5 flex-shrink-0" />
            <div>
              <p className="font-medium">AI Summary Error</p>
              <p className="text-sm mt-1">{error}</p>
            </div>
          </div>
        ) : (
          <div className="flex gap-6 h-full">
            {/* Left side - Text content */}
            <div className="flex-1 space-y-4 overflow-y-auto">
              {summary && (
                <div>
                  <p className={`text-sm leading-relaxed ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                    {summary}
                  </p>
                </div>
              )}
              
              {keyPoints.length > 0 && (
                <div>
                  <div className="flex items-center mb-2">
                    <Lightbulb className={`w-4 h-4 ${theme === 'dark' ? 'text-yellow-400' : 'text-yellow-500'} mr-2`} />
                    <h4 className={`text-sm font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
                      Key Points
                    </h4>
                  </div>
                  <ul className="space-y-1">
                    {keyPoints.map((point, index) => (
                      <li key={index} className={`text-xs ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'} flex items-start`}>
                        <span className="w-1 h-1 rounded-full mt-2 mr-2 flex-shrink-0" style={{ backgroundColor: '#29248F' }}></span>
                        {point}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              {sources.length > 0 && (
                <div>
                  <div className="flex items-center mb-2">
                    <Link className={`w-4 h-4 ${theme === 'dark' ? 'text-blue-400' : 'text-blue-500'} mr-2`} />
                    <h4 className={`text-sm font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
                      Sources
                    </h4>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {sources.slice(0, 3).map((source, index) => (
                      <span key={index} className={`text-xs px-2 py-1 rounded-full ${theme === 'dark' ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'}`}>
                        {source}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Right side - Image and Video grids */}
            <div className="w-80 space-y-4 overflow-y-auto">
              {/* Images Grid */}
              <div>
                <div className="flex items-center mb-3">
                  <Image className={`w-4 h-4 ${theme === 'dark' ? 'text-green-400' : 'text-green-500'} mr-2`} />
                  <h4 className={`text-sm font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
                    Related Images
                  </h4>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  {mockImages.map((image, index) => (
                    <div key={index} className="group cursor-pointer">
                      <div className="relative overflow-hidden rounded-lg">
                        <img
                          src={image.url}
                          alt={image.title}
                          className="w-full h-20 object-cover transition-transform duration-200 group-hover:scale-105"
                        />
                        <div className={`absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200`}></div>
                      </div>
                      <p className={`text-xs mt-1 truncate ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                        {image.title}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Videos Grid */}
              <div>
                <div className="flex items-center mb-3">
                  <Video className={`w-4 h-4 ${theme === 'dark' ? 'text-red-400' : 'text-red-500'} mr-2`} />
                  <h4 className={`text-sm font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
                    Related Videos
                  </h4>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  {mockVideos.map((video, index) => (
                    <div key={index} className="group cursor-pointer">
                      <div className="relative overflow-hidden rounded-lg">
                        <img
                          src={video.thumbnail}
                          alt={video.title}
                          className="w-full h-20 object-cover transition-transform duration-200 group-hover:scale-105"
                        />
                        <div className={`absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center`}>
                          <Play className="w-6 h-6 text-white opacity-80" />
                        </div>
                        <div className={`absolute bottom-1 right-1 px-1 py-0.5 text-xs text-white bg-black bg-opacity-70 rounded`}>
                          {video.duration}
                        </div>
                      </div>
                      <p className={`text-xs mt-1 truncate ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                        {video.title}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Resize Handle */}
      <div
        className={`absolute bottom-0 left-0 right-0 h-3 cursor-ns-resize flex items-center justify-center group transition-colors duration-200`}
        onMouseDown={handleMouseDown}
        style={{ 
          backgroundColor: 'transparent'
        }}
        onMouseEnter={(e) => {
          e.currentTarget.style.backgroundColor = theme === 'dark' 
            ? 'rgba(99, 91, 255, 0.2)' 
            : 'rgba(99, 91, 255, 0.1)';
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.backgroundColor = 'transparent';
        }}
      >
        <div 
          className={`w-12 h-1 rounded-full transition-colors duration-200`}
          style={{ 
            backgroundColor: theme === 'dark' ? '#6B7280' : '#D1D5DB'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.backgroundColor = '#635BFF';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.backgroundColor = theme === 'dark' ? '#6B7280' : '#D1D5DB';
          }}
        ></div>
      </div>
    </div>
  );
};